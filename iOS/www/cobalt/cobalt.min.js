var cobalt={userEvents:{},debug:false,debugInBrowser:false,debugInDiv:false,callbacks:{},lastCallbackId:0,init:function(options){if(options){this.debug=options.debug===true;this.debugInBrowser=options.debugInBrowser===true;this.debugInDiv=options.debugInDiv===true;if(cobalt.debugInDiv){this.createLogDiv()}if(options.events){this.userEvents=options.events}cobalt.storage.enable();$.extend(cobalt.datePicker,options.datePicker);if(cobalt.datePicker.enabled){cobalt.datePicker.init()}}else{cobalt.storage.enable()}if(cobalt.adapter.init){cobalt.adapter.init()}cobalt.send({type:"cobaltIsReady"})},addEventListener:function(eventName,handlerFunction){if(typeof eventName==="string"&&typeof handlerFunction==="function"){this.userEvents[eventName]=handlerFunction}},removeEventListener:function(eventName){if(typeof eventName==="string"&&this.userEvents[eventName]){this.userEvents[eventName]=undefined}},log:function(){var logString=cobalt.argumentsToString(arguments);if(cobalt.debug){if(cobalt.debugInBrowser&&window.console){console.log(logString)}else{cobalt.send({type:"log",value:logString})}cobalt.divLog(logString)}},divLog:function(){if(cobalt.debugInDiv){cobalt.createLogDiv();var logdiv=$("#cobalt_logdiv");if(logdiv.length){var logString="<br/>"+cobalt.argumentsToString(arguments);try{logdiv.append(logString)}catch(e){logdiv.append("<b>cobalt.log failed on something.</b>")}}}},argumentsToString:function(){var stringItems=[];$.each(arguments[0],function(i,elem){stringItems.push(cobalt.toString(elem))});return stringItems.join(" ")},createLogDiv:function(){if($("#cobalt_logdiv").length==0){$("body").append('<div id="cobalt_logdiv" style="width:100%; text-align: left; height: 100px; border:1px solid blue; overflow: scroll; background:#eee;"></div>')}},toggleLogDiv:function(){if($(this).css("width")!="250px"){$(this).css({width:"250px",height:"300px",overflow:"scroll"})}else{$(this).css({width:"10px",height:"10px",overflow:"hidden"})}},send:function(obj,callback){if(callback){if(typeof callback==="function"){obj.callback=""+cobalt.lastCallbackId++;cobalt.callbacks[obj.callback]=callback}else if(typeof callback==="string"){obj.callback=""+callback}}if(cobalt.debugInBrowser){cobalt.log("sending",obj)}cobalt.adapter.send(obj,callback)},sendEvent:function(eventName,params,callback){if(eventName){var obj={type:"event",event:eventName,data:params||{}};cobalt.send(obj,callback)}},sendCallback:function(callback,data){if(typeof callback==="string"&&callback.length>0){cobalt.divLog("calling callback with callback id = ",callback);cobalt.send({type:"callback",callback:callback,data:data})}},navigate:function(navigationType,page,controller){switch(navigationType){case"push":if(page){cobalt.send({type:"navigation",action:"push",data:{page:page,controller:controller}})}break;case"pop":cobalt.send({type:"navigation",action:"pop"});break;case"modal":if(page){cobalt.adapter.navigateToModal(page,controller)}break;case"dismiss":cobalt.adapter.dismissFromModal();break}},toast:function(text){cobalt.send({type:"ui",control:"toast",data:{message:cobalt.toString(text)}})},alert:function(title,text,buttons,options){if(title||text){var obj={type:"ui",control:"alert",data:{message:text,title:title}};var callback;if(buttons&&cobalt.isArray(buttons)&&buttons.length){obj.data.buttons=buttons}if(options){if(typeof options.callback==="string"||typeof options.callback==="function"){callback=options.callback}if(options.cancelable){obj.data.cancelable=true}}if(!obj.data.id||!cobalt.isNumber(obj.data.id)){obj.data.id=0}cobalt.send(obj,callback)}},webLayer:function(action,data,fadeDuration){switch(action){case"dismiss":cobalt.send({type:"webLayer",action:"dismiss",data:data});break;case"show":if(data){cobalt.send({type:"webLayer",action:"show",data:{page:data,fadeDuration:fadeDuration}})}break}},openExternalUrl:function(url){if(url){cobalt.send({type:"intent",action:"openExternalUrl",data:{url:url}})}},execute:function(json){cobalt.divLog("received",json);if(json&&typeof json=="string"){try{json=JSON.parse(json)}catch(e){cobalt.divLog("can't parse string to JSON")}}try{switch(json&&json.type){case"event":cobalt.adapter.handleEvent(json);break;case"callback":cobalt.adapter.handleCallback(json);break;default:cobalt.adapter.handleUnknown(json)}}catch(e){cobalt.log("cobalt.execute failed : "+e)}},tryToCallCallback:function(json){cobalt.divLog("trying to call web callback");var callbackfunction=null;if(cobalt.isNumber(json.callback)&&typeof cobalt.callbacks[json.callback]==="function"){callbackfunction=cobalt.callbacks[json.callback]}else if(typeof json.callback==="string"){callbackfunction=eval(json.callback)}if(typeof callbackfunction==="function"){try{callbackfunction(json.data)}catch(e){cobalt.log("Failed calling callback : "+e)}}else{cobalt.adapter.handleUnknown(json)}},isNumber:function(n){return!isNaN(parseFloat(n))&&isFinite(n)},isArray:function(arr){return Object.prototype.toString.call(arr)==="[object Array]"},toString:function(stuff){switch(typeof stuff){case"string":break;case"function":stuff=(""+stuff.call).replace("native","web");break;default:try{stuff=JSON.stringify(stuff)}catch(e){stuff=""+stuff}}return stuff},HTMLEncode:function(value){return $("<div/>").text(value||"").html()},HTMLDecode:function(value){return $("<div/>").html(value||"").text()},defaultBehaviors:{handleEvent:function(json){cobalt.log("received event",json.event);if(cobalt.userEvents&&typeof cobalt.userEvents[json.event]==="function"){cobalt.userEvents[json.event](json.data,json.callback)}else{cobalt.adapter.handleUnknown(json)}},handleCallback:function(json){switch(json.callback){default:cobalt.tryToCallCallback(json);break}},handleUnknown:function(json){cobalt.log("received unhandled message ",json)},navigateToModal:function(page,controller){cobalt.send({type:"navigation",action:"modal",data:{page:page,controller:controller}})},dismissFromModal:function(){cobalt.send({type:"navigation",action:"dismiss"})},initStorage:function(){return cobalt.storage.enable()}},datePicker:{enabled:true,texts:{validate:"Ok",cancel:"Cancel","delete":"Clear"},format:function(value){return value},placeholderStyles:"width:100%; color:#AAA;",init:function(){var inputs=$("input[type=date]");inputs.each(function(){var input=$(this);var id=input.attr("id");if(!id){id="CobaltGeneratedId_"+Math.random().toString(36).substring(7);input.attr("id",id)}cobalt.datePicker.updateFromValue.apply(input)});if(cobalt.adapter.datePicker&&cobalt.adapter.datePicker.init){cobalt.adapter.datePicker.init(inputs)}},updateFromValue:function(){var id=$(this).attr("id");cobalt.log("updating storage value of date #",id);if($(this).val()){$(this).addClass("not_empty")}else{$(this).removeClass("not_empty")}cobalt.log("current value is",$(this).val());var values=$(this).val().split("-");if(values.length==3){var d={year:parseInt(values[0],10),month:parseInt(values[1],10),day:parseInt(values[2],10)};cobalt.log("setting storage date ","CobaltDatePickerValue_"+id,d);cobalt.storage.setItem("CobaltDatePickerValue_"+id,d,"json")}else{cobalt.log("removing date");cobalt.storage.removeItem("CobaltDatePickerValue_"+id)}return false},enhanceFieldValue:function(){var date=cobalt.storage.getItem("CobaltDatePickerValue_"+$(this).attr("id"),"json");if(date){cobalt.log("format date=",date);$(this).val(cobalt.datePicker.format(cobalt.datePicker.stringifyDate(date)))}},stringifyDate:function(date){if(date&&date.year!==undefined){return date.year+"-"+cobalt.datePicker.zerofill(date.month,2)+"-"+cobalt.datePicker.zerofill(date.day,2)}return""},zerofill:function(number,padding){return new String(new Array(padding+1).join("0")+number).slice(-padding)},val:function(input){if(cobalt.adapter.datePicker&&cobalt.adapter.datePicker.val){cobalt.log("returning cobalt adapter datePicker value");return cobalt.adapter.datePicker.val(input)}else{cobalt.log("returning cobalt default datePicker value");return $(input).val()||undefined}}},storage:{storage:false,enable:function(){var storage,fail,uid;try{uid=new Date;(storage=window.localStorage).setItem(uid,uid);fail=storage.getItem(uid)!=uid;storage.removeItem(uid);fail&&(storage=false)}catch(e){}if(!storage){return false}else{this.storage=storage;return true}},clear:function(){if(this.storage){this.storage.clear()}},getItem:function(uid,type){if(this.storage){var val=this.storage.getItem(uid);if(val){switch(type){case undefined:return val;case"int":return parseInt(val);case"float":return parseFloat(val);case"date":return new Date(val);case"json":return JSON.parse(val)}return val}return undefined}},setItem:function(uid,value,type){if(this.storage){switch(type){case"json":return this.storage.setItem(uid,JSON.stringify(value));default:return this.storage.setItem(uid,""+value)}}},removeItem:function(uid){if(this.storage){return this.storage.removeItem(uid)}}}};cobalt.ios_adapter={pipeline:[],pipelineRunning:false,init:function(){cobalt.platform="iOs"},handleCallback:function(json){switch(json.callback){case"callbackSimpleAcquitment":cobalt.divLog("received message acquitment");cobalt.adapter.unpipe();if(cobalt.adapter.pipeline.length==0){cobalt.divLog("end of ios message stack");cobalt.adapter.pipelineRunning=false}break;default:cobalt.tryToCallCallback(json);break}},send:function(obj){cobalt.divLog("adding to ios message stack",obj);cobalt.adapter.pipeline.push(obj);if(!cobalt.adapter.pipelineRunning){cobalt.adapter.unpipe()}},unpipe:function(){cobalt.adapter.pipelineRunning=true;var objToSend=cobalt.adapter.pipeline.shift();if(objToSend&&!cobalt.debugInBrowser){cobalt.divLog("sending",objToSend);document.location.href=encodeURIComponent("cob@l7#k&y"+JSON.stringify(objToSend))}},datePicker:{init:function(inputs){inputs.each(function(){var input=$(this);var id=input.attr("id");var placeholder=input.attr("placeholder");if(placeholder){$("head").append("<style> #"+id+':before{ content:"'+placeholder+'"; '+cobalt.datePicker.placeholderStyles+" } #"+id+":focus:before,#"+id+".not_empty:before{ content:none }</style>")}input.on("change keyup",cobalt.datePicker.updateFromValue)})}},handleEvent:cobalt.defaultBehaviors.handleEvent,handleUnknown:cobalt.defaultBehaviors.handleUnknown,navigateToModal:cobalt.defaultBehaviors.navigateToModal,dismissFromModal:cobalt.defaultBehaviors.dismissFromModal,initStorage:cobalt.defaultBehaviors.initStorage};cobalt.adapter=cobalt.ios_adapter;